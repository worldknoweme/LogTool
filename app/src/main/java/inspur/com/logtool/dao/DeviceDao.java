package inspur.com.logtool.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

import inspur.com.logtool.model.Device;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DEVICE".
*/
public class DeviceDao extends AbstractDao<Device, String> {

    public static final String TABLENAME = "DEVICE";

    /**
     * Properties of entity Device.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property ID = new Property(0, String.class, "ID", true, "ID");
        public final static Property TIME = new Property(1, String.class, "TIME", false, "TIME");
        public final static Property DEVICE_NAME = new Property(2, String.class, "DEVICE_NAME", false, "DEVICE__NAME");
        public final static Property ACTION = new Property(3, String.class, "ACTION", false, "ACTION");
        public final static Property CODE = new Property(4, String.class, "CODE", false, "CODE");
        public final static Property DESCRIPTION = new Property(5, String.class, "DESCRIPTION", false, "DESCRIPTION");
    }


    public DeviceDao(DaoConfig config) {
        super(config);
    }
    
    public DeviceDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DEVICE\" (" + //
                "\"ID\" TEXT PRIMARY KEY NOT NULL ," + // 0: ID
                "\"TIME\" TEXT," + // 1: TIME
                "\"DEVICE__NAME\" TEXT," + // 2: DEVICE_NAME
                "\"ACTION\" TEXT," + // 3: ACTION
                "\"CODE\" TEXT," + // 4: CODE
                "\"DESCRIPTION\" TEXT);"); // 5: DESCRIPTION
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DEVICE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Device entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String TIME = entity.getTIME();
        if (TIME != null) {
            stmt.bindString(2, TIME);
        }
 
        String DEVICE_NAME = entity.getDEVICE_NAME();
        if (DEVICE_NAME != null) {
            stmt.bindString(3, DEVICE_NAME);
        }
 
        String ACTION = entity.getACTION();
        if (ACTION != null) {
            stmt.bindString(4, ACTION);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(5, CODE);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(6, DESCRIPTION);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Device entity) {
        stmt.clearBindings();
 
        String ID = entity.getID();
        if (ID != null) {
            stmt.bindString(1, ID);
        }
 
        String TIME = entity.getTIME();
        if (TIME != null) {
            stmt.bindString(2, TIME);
        }
 
        String DEVICE_NAME = entity.getDEVICE_NAME();
        if (DEVICE_NAME != null) {
            stmt.bindString(3, DEVICE_NAME);
        }
 
        String ACTION = entity.getACTION();
        if (ACTION != null) {
            stmt.bindString(4, ACTION);
        }
 
        String CODE = entity.getCODE();
        if (CODE != null) {
            stmt.bindString(5, CODE);
        }
 
        String DESCRIPTION = entity.getDESCRIPTION();
        if (DESCRIPTION != null) {
            stmt.bindString(6, DESCRIPTION);
        }
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public Device readEntity(Cursor cursor, int offset) {
        Device entity = new Device( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // ID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // TIME
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // DEVICE_NAME
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3), // ACTION
            cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4), // CODE
            cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5) // DESCRIPTION
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Device entity, int offset) {
        entity.setID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setTIME(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDEVICE_NAME(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setACTION(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
        entity.setCODE(cursor.isNull(offset + 4) ? null : cursor.getString(offset + 4));
        entity.setDESCRIPTION(cursor.isNull(offset + 5) ? null : cursor.getString(offset + 5));
     }
    
    @Override
    protected final String updateKeyAfterInsert(Device entity, long rowId) {
        return entity.getID();
    }
    
    @Override
    public String getKey(Device entity) {
        if(entity != null) {
            return entity.getID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Device entity) {
        return entity.getID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
